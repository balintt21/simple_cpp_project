#!/bin/bash

#SETTINGS
makefile_template_base64="Q0MgPSBnKysKQ0NfRkxBR1MgPSAtTzMgLVdhbGwgLXN0ZD1jKysxNwpMRF9GTEFHUyA9Ck5BTUUgPSBteXByb2dyYW0KU09VUkNFX0RJUiA9IC4vc3JjClNPVVJDRV9GSUxFUyA9ICQoc2hlbGwgZmluZCAkKFNPVVJDRV9ESVIpIC10eXBlIGYgLWlyZWdleCAnLipcLlwoY1x8aVx8aWlcfGNjXHxjcFx8Y3h4XHxjcHBcfENQUFx8YysrXHxDXHxzXHxTXHxzeFwpJyApCk9VVFBVVF9ESVIgPSAuL291dHB1dApJTlNUQUxMX0RJUiA9IC91c3IvbG9jYWwvYmluCgphbGw6ICQoT1VUUFVUX0RJUikgJChTT1VSQ0VfRklMRVMpIAoJJChDQykgJChDQ19GTEFHUykgJChTT1VSQ0VfRklMRVMpIC1vICIkKE9VVFBVVF9ESVIpLyQoTkFNRSkiICQoTERfRkxBR1MpCgouUEhPTlk6IGluc3RhbGwKaW5zdGFsbDogYWxsCgljcCAkKE9VVFBVVF9ESVIpLyQoTkFNRSkgJChJTlNUQUxMX0RJUikvJChOQU1FKQoKLlBIT05ZOiBjbGVhbgpjbGVhbjogCglybSAtcmYgJChPVVRQVVRfRElSKQoJCi5QSE9OWTogdW5pbnN0YWxsCnVuaW5zdGFsbDoKCXJtIC1yZiAkKElOU1RBTExfRElSKS8kKE5BTUUpCgokKE9VVFBVVF9ESVIpOgoJbWtkaXIgJChPVVRQVVRfRElSKQo="
main_cpp_template_base64="I2luY2x1ZGUgPGNzdGRpbz4KI2luY2x1ZGUgImFyZ3VtZW50X3BhcnNlci5oIgoKdm9pZCBwcmludFVzYWdlKGNvbnN0IGNoYXIqIHByb2dyYW1fbmFtZSkKewogICAgcHJpbnRmKCJVc2FnZTogJXMgW09QVElPTlNdXG4iCiAgICAgICAgICAgIk9wdGlvbnNcbiIKICAgICAgICAgICAiXHQtaCwgLS1oZWxwIC0gU2hvdyB0aGlzIG1lc3NhZ2VcbiIKICAgICAgICAgICAsIHByb2dyYW1fbmFtZSk7Cn0KCmludCBtYWluKGludCBhcmdjLCBjaGFyKiogYXJndikKewogICAgQXJndW1lbnRQYXJzZXIgYXJncyhhcmdjLCBhcmd2KTsKICAgIGlmKCBhcmdzLmVtcHR5KCkgfHwgYXJncy5oYXMoIi1oIiwgIi0taGVscCIpICkKICAgIHsKICAgICAgICBwcmludFVzYWdlKGFyZ3MucHJvZ3JhbU5hbWUoKSk7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gMDsKfQ=="
argument_parser_base64="I2lmbmRlZiBfQVJHVU1FTlRfUEFSU0VSX0hfCiNkZWZpbmUgX0FSR1VNRU5UX1BBUlNFUl9IXwoKI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KI2luY2x1ZGUgPGFsZ29yaXRobT4KI2luY2x1ZGUgPG9wdGlvbmFsPgojaW5jbHVkZSA8Y3N0ZGxpYj4KCiNpZiBfX2NwbHVzcGx1cyAhPSAyMDE3MDNMCiMgICBwcmFnbWEgR0NDIGVycm9yICJBcmd1bWVudFBhcnNlciByZXF1aXJlcyBDKysxNyBzdXBwb3J0ISIKI2VuZGlmCgpjbGFzcyBBcmd1bWVudFBhcnNlciBmaW5hbAp7CnB1YmxpYzoKICAgIHR5cGVkZWYgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmdfdmlldz4gYXJndW1lbnRzX3Q7CiAgICB0eXBlZGVmIGFyZ3VtZW50c190IHN0cmluZ3ZpZXdfbGlzdF90Owpwcml2YXRlOgogICAgYXJndW1lbnRzX3QgYXJnczsKICAgIHN0ZDo6c3RyaW5nIHByb2dyYW1fbmFtZTsKcHVibGljOgogICAgQXJndW1lbnRQYXJzZXIoaW50IGFyZ2MsIGNoYXIqKiBhcmd2KSA6IGFyZ3MoKSwgcHJvZ3JhbV9uYW1lKGFyZ3ZbMF0pCiAgICB7CiAgICAgICAgYXJncy5yZXNlcnZlKGFyZ2MpOwogICAgICAgIGZvcihpbnQgaSA9IDA7IGkgPCBhcmdjOyArK2kpIHsgYXJncy5lbXBsYWNlX2JhY2soYXJndltpXSk7IH0KICAgIH0KCiAgICBBcmd1bWVudFBhcnNlcihjb25zdCBhcmd1bWVudHNfdCYgX2FyZ3MpIDogYXJncyhfYXJncykgCiAgICB7IAogICAgICAgIGlmKCAhYXJncy5lbXB0eSgpICkgeyBwcm9ncmFtX25hbWUgPSBzdGQ6OnN0cmluZyhhcmdzLmZyb250KCkpOyB9CiAgICB9CiAgICAKICAgIGJvb2wgZW1wdHkoKSBjb25zdAogICAgeyByZXR1cm4gKGFyZ3Muc2l6ZSgpIDwgMik7IH0KCiAgICBjb25zdCBjaGFyKiBwcm9ncmFtTmFtZSgpIGNvbnN0CiAgICB7IHJldHVybiBwcm9ncmFtX25hbWUuY19zdHIoKTsgfQogICAgCiAgICBzdGQ6OnN0cmluZ192aWV3IGJhY2soKSBjb25zdAogICAgeyByZXR1cm4gYXJncy5iYWNrKCk7IH0KCiAgICBhcmd1bWVudHNfdDo6Y29uc3RfaXRlcmF0b3IgZmluZChjb25zdCBzdGQ6OnN0cmluZyYgc2hvcnRfb3B0LCBjb25zdCBzdGQ6OnN0cmluZyYgbG9uZ19vcHQpIGNvbnN0CiAgICB7CiAgICAgICAgcmV0dXJuIHN0ZDo6ZmluZF9pZihhcmdzLmNiZWdpbigpLCBhcmdzLmNlbmQoKSwgW2xvbmdfb3B0LCBzaG9ydF9vcHRdKGNvbnN0IGFyZ3VtZW50c190Ojp2YWx1ZV90eXBlJiBvcHRpb24pIC0+IGJvb2wgCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gKCAoICghbG9uZ19vcHQuZW1wdHkoKSkgJiYgKG9wdGlvbi5maW5kKGxvbmdfb3B0KSAhPSBzdGQ6OnN0cmluZzo6bnBvcyApICkKICAgICAgICAgICAgICAgIHx8ICggIXNob3J0X29wdC5lbXB0eSgpICYmICgob3B0aW9uWzBdID09ICctJykgJiYgKG9wdGlvblsxXSAhPSAnLScpICYmIChvcHRpb24uZmluZChzaG9ydF9vcHRbMV0pICE9IHN0ZDo6c3RyaW5nOjpucG9zKSkgKSApOwogICAgICAgIH0pOwogICAgfQoKICAgIGJvb2wgaGFzKGNvbnN0IHN0ZDo6c3RyaW5nJiBzaG9ydF9vcHQsIGNvbnN0IHN0ZDo6c3RyaW5nJiBsb25nX29wdCkgY29uc3QKICAgIHsgcmV0dXJuIGZpbmQoc2hvcnRfb3B0LCBsb25nX29wdCkgIT0gYXJncy5jZW5kKCk7IH0KCiAgICBib29sIGV4aXN0cyhjb25zdCBzdGQ6OnN0cmluZyYgc2hvcnRfb3B0LCBjb25zdCBzdGQ6OnN0cmluZyYgbG9uZ19vcHQpIGNvbnN0IAogICAgeyByZXR1cm4gaGFzKHNob3J0X29wdCwgbG9uZ19vcHQpOyB9CgogICAgYm9vbCBmb3VuZChjb25zdCBhcmd1bWVudHNfdDo6Y29uc3RfaXRlcmF0b3ImIGFyZ19pdCkgY29uc3QKICAgIHsgcmV0dXJuIGFyZ19pdCAhPSBhcmdzLmNlbmQoKTsgfQoKICAgIHN0ZDo6c3RyaW5nX3ZpZXcgZ2V0KGFyZ3VtZW50c190Ojpjb25zdF9pdGVyYXRvciYgYXJnX2l0KSBjb25zdAogICAgewogICAgICAgIGlmKCBhcmdfaXQgIT0gYXJncy5jZW5kKCkgKQogICAgICAgIHsKICAgICAgICAgICAgY29uc3Qgc3RkOjpzdHJpbmdfdmlldyYgb3B0aW9uID0gKmFyZ19pdDsKICAgICAgICAgICAgc2l6ZV90IHBvcyA9IG9wdGlvbi5maW5kKCc9Jyk7CiAgICAgICAgICAgIGlmKCBwb3MgIT0gc3RkOjpzdHJpbmdfdmlldzo6bnBvcyApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb24uc3Vic3RyKHBvcysxKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICsrYXJnX2l0OwogICAgICAgICAgICAgICAgaWYoIGFyZ19pdCAhPSBhcmdzLmNlbmQoKSApCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXV0byByZXMgPSAqYXJnX2l0OwogICAgICAgICAgICAgICAgICAgIC0tYXJnX2l0OwogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICIiOwogICAgfQoKICAgIHN0cmluZ3ZpZXdfbGlzdF90IGdldExpc3QoYXJndW1lbnRzX3Q6OmNvbnN0X2l0ZXJhdG9yJiBhcmdfaXQsIGNvbnN0IHN0ZDo6c3RyaW5nJiBkZWxpbSkgY29uc3QKICAgIHsKICAgICAgICBzdHJpbmd2aWV3X2xpc3RfdCBsaXN0OwogICAgICAgIGF1dG8gcGFja2VkX3ZhbHVlID0gZ2V0KGFyZ19pdCk7CiAgICAgICAgc2l6ZV90IHBvcyA9IHBhY2tlZF92YWx1ZS5maW5kKGRlbGltKTsKICAgICAgICB3aGlsZSggcG9zICE9IHN0ZDo6c3RyaW5nX3ZpZXc6Om5wb3MgKQogICAgICAgIHsKICAgICAgICAgICAgaWYoIHBvcyA+IDApCiAgICAgICAgICAgIHsgbGlzdC5lbXBsYWNlX2JhY2socGFja2VkX3ZhbHVlLnN1YnN0cigwLCBwb3MpKTsgfQogICAgICAgICAgICBwYWNrZWRfdmFsdWUgPSBwYWNrZWRfdmFsdWUuc3Vic3RyKHBvcyArIDEpOwogICAgICAgICAgICBwb3MgPSBwYWNrZWRfdmFsdWUuZmluZChkZWxpbSk7CiAgICAgICAgfQoKICAgICAgICBpZiggIXBhY2tlZF92YWx1ZS5lbXB0eSgpICkKICAgICAgICB7IGxpc3QuZW1wbGFjZV9iYWNrKHBhY2tlZF92YWx1ZSk7IH0KCiAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICB9CgogICAgc3RkOjpvcHRpb25hbDxzdGQ6OnN0cmluZ192aWV3PiBnZXQoY29uc3Qgc3RkOjpzdHJpbmcmIHNob3J0X29wdCwgY29uc3Qgc3RkOjpzdHJpbmcmIGxvbmdfb3B0KSBjb25zdAogICAgewogICAgICAgIGF1dG8gYXJnID0gZmluZChzaG9ydF9vcHQsIGxvbmdfb3B0KTsKICAgICAgICByZXR1cm4gKCBmb3VuZChhcmcpID8gc3RkOjptYWtlX29wdGlvbmFsPHN0ZDo6c3RyaW5nX3ZpZXc+KGdldChhcmcpKSA6IHN0ZDo6bnVsbG9wdCApOwogICAgfQoKICAgIHN0ZDo6b3B0aW9uYWw8c3RkOjpzdHJpbmc+IGdldFN0cmluZyhjb25zdCBzdGQ6OnN0cmluZyYgc2hvcnRfb3B0LCBjb25zdCBzdGQ6OnN0cmluZyYgbG9uZ19vcHQpIGNvbnN0IAogICAgewogICAgICAgIGlmKCBhdXRvIG9wdCA9IGdldChzaG9ydF9vcHQsIGxvbmdfb3B0KSApCiAgICAgICAgeyByZXR1cm4gc3RkOjpzdHJpbmcob3B0LnZhbHVlKCkpOyB9IAogICAgICAgIGVsc2UgCiAgICAgICAgeyByZXR1cm4gc3RkOjpudWxsb3B0OyB9CiAgICB9CgogICAgc3RkOjpvcHRpb25hbDxpbnQ2NF90PiBnZXRJbnQoY29uc3Qgc3RkOjpzdHJpbmcmIHNob3J0X29wdCwgY29uc3Qgc3RkOjpzdHJpbmcmIGxvbmdfb3B0LCBpbnQgYmFzZSA9IDEwKSBjb25zdAogICAgewogICAgICAgIGlmKCBhdXRvIG9wdCA9IGdldChzaG9ydF9vcHQsIGxvbmdfb3B0KSApCiAgICAgICAgeyByZXR1cm4gc3RkOjpzdHJ0b2xsKG9wdC52YWx1ZSgpLmRhdGEoKSwgbnVsbHB0ciwgYmFzZSk7IH0gCiAgICAgICAgZWxzZQogICAgICAgIHsgcmV0dXJuIHN0ZDo6bnVsbG9wdDsgfQogICAgfQoKICAgIHN0ZDo6b3B0aW9uYWw8ZG91YmxlPiBnZXREb3VibGUoY29uc3Qgc3RkOjpzdHJpbmcmIHNob3J0X29wdCwgY29uc3Qgc3RkOjpzdHJpbmcmIGxvbmdfb3B0KSBjb25zdAogICAgewogICAgICAgIGlmKCBhdXRvIG9wdCA9IGdldChzaG9ydF9vcHQsIGxvbmdfb3B0KSApCiAgICAgICAgeyByZXR1cm4gc3RkOjpzdHJ0b2xkKG9wdC52YWx1ZSgpLmRhdGEoKSwgbnVsbHB0cik7IH0gCiAgICAgICAgZWxzZQogICAgICAgIHsgcmV0dXJuIHN0ZDo6bnVsbG9wdDsgfQogICAgfQoKICAgIHN0ZDo6b3B0aW9uYWw8aW50NjRfdD4gZ2V0SGV4KGNvbnN0IHN0ZDo6c3RyaW5nJiBzaG9ydF9vcHQsIGNvbnN0IHN0ZDo6c3RyaW5nJiBsb25nX29wdCkgY29uc3QKICAgIHsgcmV0dXJuIGdldEludChzaG9ydF9vcHQsIGxvbmdfb3B0LCAxNik7IH0KCiAgICBzdGQ6Om9wdGlvbmFsPHN0cmluZ3ZpZXdfbGlzdF90PiBnZXRMaXN0KGNvbnN0IHN0ZDo6c3RyaW5nJiBzaG9ydF9vcHQsIGNvbnN0IHN0ZDo6c3RyaW5nJiBsb25nX29wdCwgY29uc3Qgc3RkOjpzdHJpbmcmIGRlbGltKSBjb25zdAogICAgewogICAgICAgIGF1dG8gYXJnID0gZmluZChzaG9ydF9vcHQsIGxvbmdfb3B0KTsKICAgICAgICByZXR1cm4gKCBmb3VuZChhcmcpID8gc3RkOjptYWtlX29wdGlvbmFsPHN0cmluZ3ZpZXdfbGlzdF90PihnZXRMaXN0KGFyZywgZGVsaW0pKSA6IHN0ZDo6bnVsbG9wdCApOwogICAgfQp9OwoKI2VuZGlmCg=="
#DO NOT TOUCH
print_usage()
{
    echo -e "Usage: $1 <NAME> [DIR]\n\nDescription:\n" \
"\tInitializes a simple C++ project into DIR/NAME\n" \
"\tBy default DIR is the current working directory (./)\n\n" \
"\tFollowing files will be generated:\n" \
"\tDIR/NAME/Makefile\n" \
"\tDIR/NAME/src/main.cpp\n\n"

}

if [ $# -lt 1 ]; then
    print_usage $0
    exit 0
fi

project_dir="./"
if [ $# -gt 1 ]; then
    if [ ! -d "$2" ]; then
        echo -e "[DIR] must exist for project initialization!\nNo such a file or directory: $2"
        exit 2
    fi
    project_dir="$2"
fi

project_path="$project_dir/$1"
mkdir -p "$project_path"
if [ $? -eq 0 ]; then
    mkdir -p "$project_path/src"
    if [ $? -eq 0 ]; then
        echo "$argument_parser_base64" | base64 -d > "$project_path/src/argument_parser.h"
        if [ -f "$project_path/src/argument_parser.h" ]; then
            echo "$main_cpp_template_base64" | base64 -d > "$project_path/src/main.cpp"
            if [ -f "$project_path/src/main.cpp" ]; then
                make_file_path="$project_path/Makefile"
                echo "$makefile_template_base64" | base64 -d > "$make_file_path"
                if [ -f "$make_file_path" ]; then
                    sed -i "s/myprogram/$1/g" "$make_file_path"
                fi
            fi
        fi
    fi
fi